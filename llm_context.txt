
# ----- START: .env -----

# Database (–¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)
POSTGRES_DB=proxy_stats
POSTGRES_USER=admin
POSTGRES_PASSWORD=admin123
DATABASE_URL=postgresql+asyncpg://admin:admin123@postgres:5432/proxy_stats
CRYPTOCOMPARE_API_KEY="27907d370baf3d66efe871c13ace44e8431d66320445d2d7ddd3ccf5392ff47e"

# API
SECRET_KEY=dev-secret-key-change-later
DEBUG=True

# ----- END: .env -----

# ----- START: .env.example -----

# Database
POSTGRES_DB=proxy_stats
POSTGRES_USER=admin
POSTGRES_PASSWORD=secret123
DATABASE_URL=postgresql+asyncpg://admin:secret123@postgres:5432/proxy_stats
CRYPTOCOMPARE_API_KEY="27907d370baf3d66efe871c13ace44e8431d66320445d2d7ddd3ccf5392ff47e"

# API
SECRET_KEY=your-secret-key-here
DEBUG=True

# ----- END: .env.example -----

# ----- START: alembic.ini -----

[alembic]
script_location = alembic
prepend_sys_path = .
version_path_separator = os
#sqlalchemy.url = postgresql+asyncpg://admin:admin123@localhost:5432/proxy_stats

[post_write_hooks]

[loggers]
keys = root,sqlalchemy,alembic

[handlers]
keys = console

[formatters]
keys = generic

[logger_root]
level = WARN
handlers = console
qualname =

[logger_sqlalchemy]
level = WARN
handlers =
qualname = sqlalchemy.engine

[logger_alembic]
level = INFO
handlers =
qualname = alembic

[handler_console]
class = StreamHandler
args = (sys.stderr,)
level = NOTSET
formatter = generic

[formatter_generic]
format = %(levelname)-5.5s [%(name)s] %(message)s
datefmt = %H:%M:%S

# ----- END: alembic.ini -----

# ----- START: docker-compose.override.yml -----

version: '3.8'

services:
  fastapi:
    # –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è –æ—Ç–ª–∞–¥—á–∏–∫–∞
    volumes:
      - .:/app
    ports:
      - "5678:5678"
    # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∑–∞–ø—É—Å–∫–∞, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –æ—Ç–ª–∞–¥–∫–∏
    command: python -m debugpy --wait-for-client --listen 0.0.0.0:5678 -m uvicorn app.main:app --host 0.0.0.0 --port 8008 --reload
# ----- END: docker-compose.override.yml -----

# ----- START: docker-compose.yml -----

version: '3.8'

services:
  # –°–µ—Ä–≤–∏—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–æ—Å—Ç–∞–µ—Ç—Å—è –ø–æ—á—Ç–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
  postgres:
    image: postgres:16-alpine
    container_name: proxy_stats_db
    env_file:
      - .env.db
    ports:
      - "5432:5432" # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î —Å —Ö–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–µ—Ä–µ–∑ DBeaver)
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d proxy_stats"]
      interval: 5s
      timeout: 5s
      retries: 5

  # –ù–û–í–´–ô –°–ï–†–í–ò–° –¥–ª—è –Ω–∞—à–µ–≥–æ FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  fastapi:
    build: . # –£–∫–∞–∑—ã–≤–∞–µ—Ç Docker Compose —Å–æ–±—Ä–∞—Ç—å –æ–±—Ä–∞–∑ –∏–∑ Dockerfile –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    container_name: proxy_stats_api
    env_file:
      - .env # –ü–µ—Ä–µ–¥–∞–µ–º –Ω–∞—à–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    environment:
      - PYTHONPATH=/app
    ports:
      - "8008:8008" # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ—Ä—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –Ω–∞—à –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä
    volumes:
      - ./app:/app/app
      - ./alembic:/app/alembic
      - ./alembic.ini:/app/alembic.ini 
      
    command: uvicorn app.main:app --host 0.0.0.0 --port 8008 --reload # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–æ–π
    depends_on:
      postgres:
        condition: service_healthy # –ó–∞–ø—É—Å—Ç–∏—Ç FastAPI —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ postgres –ø—Ä–æ–π–¥–µ—Ç healthcheck

volumes:
  postgres_data:
    name: global_bd_postgres_volume
# ----- END: docker-compose.yml -----

# ----- START: Dockerfile -----

# –ò—Å–ø–æ–ª—å–∑—É–µ–º slim-–æ–±—Ä–∞–∑ –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
FROM python:3.11-slim

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
WORKDIR /app

# –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞–∫–µ—Ç—ã –∏ —Å—Ç–∞–≤–∏–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω—ã –Ω–∞—à–∏–º Python-–±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º
# postgresql-client –Ω—É–∂–µ–Ω –¥–ª—è —É—Ç–∏–ª–∏—Ç—ã pg_isready
RUN apt-get update && apt-get install -y \
    gcc \
    libpq-dev \
    postgresql-client \
    && rm -rf /var/lib/apt/lists/*

# –ö–æ–ø–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª —Å –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏, —á—Ç–æ–±—ã –∫—ç—à–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Å–ª–æ–π
COPY requirements.txt .

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
RUN pip install --no-cache-dir -r requirements.txt


# –ö–æ–ø–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Alembic –∏ —Å–∞–º–∏ –º–∏–≥—Ä–∞—Ü–∏–∏
COPY alembic.ini .
COPY alembic ./alembic


# –ö–æ–ø–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. 
# –ü—Ä–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —ç—Ç–∞ –ø–∞–ø–∫–∞ –±—É–¥–µ—Ç "–ø–µ—Ä–µ–∫—Ä—ã—Ç–∞" volume-–æ–º, –Ω–æ –¥–ª—è production-—Å–±–æ—Ä–∫–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
COPY ./app ./app

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –∫–æ—Ç–æ—Ä—É—é –º—ã –±—É–¥–µ–º –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤ docker-compose.
# –û–Ω–∞ –Ω—É–∂–Ω–∞, –µ—Å–ª–∏ –∫—Ç–æ-—Ç–æ –∑–∞—Ö–æ—á–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–º–∞–Ω–¥–æ–π `docker run`.
CMD ["uvicorn", "app.main:app", "--host", "0.0.0.0", "--port", "8008"]
# ----- END: Dockerfile -----

# ----- START: README.md -----

# Proxy Stats API

micro+db.

## –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç



# ----- END: README.md -----

# ----- START: requirements.txt -----

fastapi==0.104.1
uvicorn[standard]==0.24.0
sqlalchemy==2.0.23
alembic==1.13.0
pydantic==2.5.0
pydantic-settings==2.1.0
python-dotenv==1.0.0
asyncpg==0.29.0
requests==2.31.0
debugpy==1.8.1

# ----- END: requirements.txt -----

# ----- START: start.cmd -----

	@echo off
chcp 65001 >nul
echo.
echo üöÄ –ó–ê–ü–£–°–ö –ú–ò–ö–†–û–°–ï–†–í–ò–°–ê (Docker-centric –ø–æ–¥—Ö–æ–¥)
echo ===============================================
echo.

echo 1. üê≥ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã 'postgres' –∏ 'fastapi' –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ...
docker-compose up --build -d
if %errorlevel% neq 0 (
    echo ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Docker Compose. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ.
    pause
    exit /b 1
)
echo ‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω—ã.
echo.

echo 2. ‚è≥ –û–∂–∏–¥–∞–µ–º, –ø–æ–∫–∞ PostgreSQL —Å—Ç–∞–Ω–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω...
rem Healthcheck –≤ docker-compose —É–∂–µ —Å–¥–µ–ª–∞–ª –æ—Å–Ω–æ–≤–Ω—É—é —Ä–∞–±–æ—Ç—É, –Ω–æ –º—ã –ø–æ–¥–æ–∂–¥–µ–º –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏.
:wait_db
docker-compose exec -T postgres pg_isready -U admin -d proxy_stats >nul 2>&1
if %errorlevel% neq 0 (
    timeout /t 2 >nul
    goto wait_db
)
echo ‚úÖ PostgreSQL –≥–æ—Ç–æ–≤ –∫ –ø—Ä–∏–µ–º—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π!
echo.

echo 3. üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (Alembic)...
echo    (–í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ 'fastapi')
docker-compose exec fastapi alembic upgrade head
if %errorlevel% neq 0 (
    echo ‚ö†Ô∏è  –í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–π. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.
) else (
    echo ‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.
)
echo.



echo 4. üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏...
if exist "postgres_data\scripts\check_and_restore.ps1" (
    powershell -ExecutionPolicy Bypass -File "postgres_data\scripts\check_and_restore.ps1"
) else (
    echo ‚ö†Ô∏è  –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è 'check_and_restore.ps1' –Ω–µ –Ω–∞–π–¥–µ–Ω.
)
echo ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.
echo.



echo üéâ –°–ò–°–¢–ï–ú–ê –ü–û–õ–ù–û–°–¢–¨–Æ –ì–û–¢–û–í–ê!
echo ============================
echo üìä –ë–î –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞: localhost:5432
echo üîß API –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:8008
echo üìñ Docs: http://localhost:8008/docs
echo.
echo üîç –ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ª–æ–≥–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: docker-compose logs -f
echo üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ stop.bat
echo.
pause
# ----- END: start.cmd -----

# ----- START: stop.bat -----

@echo off
chcp 65001 >nul
echo.
echo üõë –û–°–¢–ê–ù–û–í–ö–ê –ú–ò–ö–†–û–°–ï–†–í–ò–°–ê
echo ========================
echo.

echo üíæ –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –æ—Å—Ç–∞–Ω–æ–≤–∫–æ–π...
if exist "postgres_data\scripts\backup_database.ps1" (
    powershell -ExecutionPolicy Bypass -File "postgres_data\scripts\backup_database.ps1"
    echo ‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω
) else (
    echo ‚ö†Ô∏è  –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω
)

echo üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∏—Å—Ç–µ–º—É...
docker-compose down

echo ‚úÖ –°–ò–°–¢–ï–ú–ê –û–°–¢–ê–ù–û–í–õ–ï–ù–ê!
echo =======================
echo üíæ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Volume
echo üîÑ –î–ª—è –∑–∞–ø—É—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ start.bat
echo.
pause
# ----- END: stop.bat -----

# ----- START: .devcontainer/devcontainer.json -----

{
    "name": "Proxy Stats API Dev",
    // –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—à–∞ —Å—Ä–µ–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è —Ñ–∞–π–ª–æ–º docker-compose.yml
    "dockerComposeFile": "../docker-compose.yml",

    // –£–∫–∞–∑—ã–≤–∞–µ–º, –≤ –∫–∞–∫–æ–º –∏–∑ —Å–µ—Ä–≤–∏—Å–æ–≤ docker-compose –º—ã —Ö–æ—Ç–∏–º —Ä–∞–±–æ—Ç–∞—Ç—å
    "service": "fastapi",

    // –ü–∞–ø–∫–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞ –≤ VS Code –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
    "workspaceFolder": "/app",

    
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–∏–º–µ–Ω–µ–Ω—ã –≤ VS Code, –∫–æ–≥–¥–∞ –æ–Ω –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
    "customizations": {
        "vscode": {
            "settings": {
                // –£–∫–∞–∑—ã–≤–∞–µ–º VS Code –ø—É—Ç—å –∫ Python –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
                "python.defaultInterpreterPath": "/usr/local/bin/python"
            },
            // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –í–ù–£–¢–†–¨ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            "extensions": [
                "ms-python.python",
                "ms-python.debugpy"
            ]
        }
    },

    // –ö–æ–º–∞–Ω–¥–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞. 
    // –ü–æ–ª–µ–∑–Ω–æ, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –¥–æ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å. –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –ø—É—Å—Ç–æ–π.
    "postCreateCommand": ""
}
# ----- END: .devcontainer/devcontainer.json -----

# ----- START: .vscode/launch.json -----

{
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Docker: Python - FastAPI",
            "type": "python", // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: —Ç–∏–ø —Ç–µ–ø–µ—Ä—å "python"
            "request": "launch",
            "module": "uvicorn", // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º uvicorn
            "args": [
                "app.main:app",
                "--host",
                "0.0.0.0",
                "--port",
                "8008",
                "--reload"
            ],
            "jinja": true, // –ü–æ–ª–µ–∑–Ω–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —à–∞–±–ª–æ–Ω–æ–≤, –µ—Å–ª–∏ –±—É–¥–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
            "pathMappings": [
                {
                    "localRoot": "${workspaceFolder}",
                    "remoteRoot": "/app"
                }
            ]
        }
    ]
}
# ----- END: .vscode/launch.json -----

# ----- START: .vscode/settings.json -----

{
"python.defaultInterpreterPath": "${workspaceFolder}/.venv/Scripts/python.exe"
}

# ----- END: .vscode/settings.json -----

# ----- START: alembic/env.py -----

import asyncio
from logging.config import fileConfig
from sqlalchemy import pool
from sqlalchemy.engine import Connection
from sqlalchemy.ext.asyncio import create_async_engine
from alembic import context

# –ò–º–ø–æ—Ä—Ç—ã –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
from app.database import Base
from app.config import settings

# –í–∞–∂–Ω–æ! –ò–º–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –≤—Å–µ –≤–∞—à–∏ –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã Alembic –∏—Ö –≤–∏–¥–µ–ª
from app.models import earnings, currency

# this is the Alembic Config object
config = context.config

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ URL –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
config.set_main_option("sqlalchemy.url", settings.database_url)

# Interpret the config file for Python logging.
if config.config_file_name is not None:
    fileConfig(config.config_file_name)

# add your model's MetaData object here for 'autogenerate' support
target_metadata = Base.metadata


def run_migrations_offline() -> None:
    """Run migrations in 'offline' mode."""
    url = config.get_main_option("sqlalchemy.url")
    context.configure(
        url=url,
        target_metadata=target_metadata,
        literal_binds=True,
        dialect_opts={"paramstyle": "named"},
    )

    with context.begin_transaction():
        context.run_migrations()


def do_run_migrations(connection: Connection) -> None:
    context.configure(connection=connection, target_metadata=target_metadata)

    with context.begin_transaction():
        context.run_migrations()


async def run_async_migrations() -> None:
    """In this scenario we need to create an Engine and
    associate a connection with the context."""
    connectable = create_async_engine(
        config.get_main_option("sqlalchemy.url"),
        poolclass=pool.NullPool,
    )

    async with connectable.connect() as connection:
        await connection.run_sync(do_run_migrations)

    await connectable.dispose()


def run_migrations_online() -> None:
    """Run migrations in 'online' mode."""
    asyncio.run(run_async_migrations())


if context.is_offline_mode():
    run_migrations_offline()
else:
    run_migrations_online()

# ----- END: alembic/env.py -----

# ----- START: alembic/README -----


# ----- END: alembic/README -----

# ----- START: alembic/script.py.mako -----

"""${message}

Revision ID: ${up_revision}
Revises: ${down_revision | comma,n}
Create Date: ${create_date}

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
${imports if imports else ""}

# revision identifiers, used by Alembic.
revision: str = ${repr(up_revision)}
down_revision: Union[str, None] = ${repr(down_revision)}
branch_labels: Union[str, Sequence[str], None] = ${repr(branch_labels)}
depends_on: Union[str, Sequence[str], None] = ${repr(depends_on)}


def upgrade() -> None:
    ${upgrades if upgrades else "pass"}


def downgrade() -> None:
    ${downgrades if downgrades else "pass"}

# ----- END: alembic/script.py.mako -----

# ----- START: alembic/versions/0eb8a28fe552_create_proxyearning_table.py -----

"""Create ProxyEarning table

Revision ID: 0eb8a28fe552
Revises: 72c9bfbbb880
Create Date: 2025-08-12 12:59:12.028607

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '0eb8a28fe552'
down_revision: Union[str, None] = '72c9bfbbb880'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    pass
    # ### end Alembic commands ###

# ----- END: alembic/versions/0eb8a28fe552_create_proxyearning_table.py -----

# ----- START: alembic/versions/72c9bfbbb880_create_proxyearning_table.py -----

"""Create ProxyEarning table

Revision ID: 72c9bfbbb880
Revises: 
Create Date: 2025-08-12 12:55:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '72c9bfbbb880'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã proxy_earnings
    op.create_table('proxy_earnings',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('proxy_ip', sa.String(length=45), nullable=False),
        sa.Column('proxy_port', sa.Integer(), nullable=False),
        sa.Column('proxy_key', sa.String(length=100), nullable=False),
        sa.Column('server_id', sa.String(length=50), nullable=False),
        sa.Column('bot_id', sa.String(length=50), nullable=False),
        sa.Column('bot_name', sa.String(length=100), nullable=False),
        sa.Column('faucet_name', sa.String(length=100), nullable=False),
        sa.Column('faucet_url', sa.String(length=255), nullable=True),
        sa.Column('reward_amount', sa.Numeric(precision=20, scale=8), nullable=False),
        sa.Column('reward_currency', sa.String(length=10), nullable=False),
        sa.Column('unique_key', sa.String(length=64), nullable=False),
        sa.Column('success', sa.Boolean(), nullable=False, default=True),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.Column('event_timestamp', sa.DateTime(), nullable=False),
        sa.Column('created_at', sa.DateTime(), nullable=False, server_default=sa.func.now()),
        sa.Column('extra_data', sa.Text(), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    op.create_index('ix_proxy_earnings_id', 'proxy_earnings', ['id'], unique=False)
    op.create_index('ix_proxy_earnings_proxy_ip', 'proxy_earnings', ['proxy_ip'], unique=False)
    op.create_index('ix_proxy_earnings_proxy_key', 'proxy_earnings', ['proxy_key'], unique=False)
    op.create_index('ix_proxy_earnings_server_id', 'proxy_earnings', ['server_id'], unique=False)
    op.create_index('ix_proxy_earnings_bot_name', 'proxy_earnings', ['bot_name'], unique=False)
    op.create_index('ix_proxy_earnings_unique_key', 'proxy_earnings', ['unique_key'], unique=True)


def downgrade() -> None:
    # –£–¥–∞–ª–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤
    op.drop_index('ix_proxy_earnings_unique_key', table_name='proxy_earnings')
    op.drop_index('ix_proxy_earnings_bot_name', table_name='proxy_earnings')
    op.drop_index('ix_proxy_earnings_server_id', table_name='proxy_earnings')
    op.drop_index('ix_proxy_earnings_proxy_key', table_name='proxy_earnings')
    op.drop_index('ix_proxy_earnings_proxy_ip', table_name='proxy_earnings')
    op.drop_index('ix_proxy_earnings_id', table_name='proxy_earnings')
    
    # –£–¥–∞–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    op.drop_table('proxy_earnings')

# ----- END: alembic/versions/72c9bfbbb880_create_proxyearning_table.py -----

# ----- START: alembic/versions/934c7a14d452_add_timezone_support_to_datetime_columns.py -----

"""Add timezone support to datetime columns

Revision ID: 934c7a14d452
Revises: add_currency_rates_simple
Create Date: 2025-08-20 16:34:42.109236

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '934c7a14d452'
down_revision: Union[str, None] = 'add_currency_rates_simple'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('currency_rates', 'last_updated',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.drop_constraint('currency_rates_symbol_key', 'currency_rates', type_='unique')
    op.drop_index('ix_currency_rates_symbol', table_name='currency_rates')
    op.create_index(op.f('ix_currency_rates_symbol'), 'currency_rates', ['symbol'], unique=True)
    op.alter_column('proxy_earnings', 'event_timestamp',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False)
    op.alter_column('proxy_earnings', 'created_at',
               existing_type=postgresql.TIMESTAMP(),
               type_=sa.DateTime(timezone=True),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('proxy_earnings', 'created_at',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('proxy_earnings', 'event_timestamp',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    op.drop_index(op.f('ix_currency_rates_symbol'), table_name='currency_rates')
    op.create_index('ix_currency_rates_symbol', 'currency_rates', ['symbol'], unique=False)
    op.create_unique_constraint('currency_rates_symbol_key', 'currency_rates', ['symbol'])
    op.alter_column('currency_rates', 'last_updated',
               existing_type=sa.DateTime(timezone=True),
               type_=postgresql.TIMESTAMP(),
               existing_nullable=False)
    # ### end Alembic commands ###

# ----- END: alembic/versions/934c7a14d452_add_timezone_support_to_datetime_columns.py -----

# ----- START: alembic/versions/add_currency_rates_simple.py -----

"""Add currency_rates table

Revision ID: add_currency_rates_simple
Revises: 0eb8a28fe552
Create Date: 2025-08-20 12:00:00.000000

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'add_currency_rates_simple'
down_revision = '0eb8a28fe552'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É currency_rates
    op.create_table('currency_rates',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('symbol', sa.String(length=10), nullable=False),
        sa.Column('price', sa.Numeric(precision=20, scale=8), nullable=False),
        sa.Column('last_updated', sa.DateTime(), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å—ã
    op.create_index(op.f('ix_currency_rates_id'), 'currency_rates', ['id'], unique=False)
    op.create_index(op.f('ix_currency_rates_symbol'), 'currency_rates', ['symbol'], unique=False)
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ symbol
    op.create_unique_constraint('currency_rates_symbol_key', 'currency_rates', ['symbol'])


def downgrade() -> None:
    # –£–¥–∞–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É currency_rates
    op.drop_index(op.f('ix_currency_rates_symbol'), table_name='currency_rates')
    op.drop_index(op.f('ix_currency_rates_id'), table_name='currency_rates')
    op.drop_table('currency_rates')

# ----- END: alembic/versions/add_currency_rates_simple.py -----

# ----- START: app/config.py -----

from pydantic_settings import BaseSettings
from pydantic import Field
from typing import Optional

class Settings(BaseSettings):
    # Database connection
    database_url: str = "postgresql+asyncpg://admin:admin123@localhost:5432/proxy_stats"
    
    # PostgreSQL settings (–¥–ª—è Docker Compose)
    postgres_db: str = "proxy_stats"
    postgres_user: str = "admin" 
    postgres_password: str = "admin123"
    
    # API
    secret_key: str = "your-secret-key-change-in-production"
    debug: bool = True
    
    # App
    app_name: str = "Proxy Stats API"
    version: str = "0.1.0"
     # –í—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö, –ø–æ—Å–ª–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç —Å—á–∏—Ç–∞—é—Ç—Å—è —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏
    CURRENCY_UPDATE_THRESHOLD_MINUTES: int = Field(1440, description="Cache lifetime for currency rates in minutes")
    CRYPTOCOMPARE_API_KEY: str
    class Config:
        env_file = ".env"

settings = Settings()

# ----- END: app/config.py -----

# ----- START: app/database.py -----

from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession, async_sessionmaker
from sqlalchemy.orm import declarative_base
from app.config import settings

# –°–æ–∑–¥–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –¥–≤–∏–∂–æ–∫ –ë–î
engine = create_async_engine(
    settings.database_url,
    echo=settings.debug,
    future=True
)

# –°–æ–∑–¥–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
AsyncSessionLocal = async_sessionmaker(
    engine,
    class_=AsyncSession,
    expire_on_commit=False
)

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–¥–µ–ª–µ–π
Base = declarative_base()


# Dependency –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
async def get_db():
    async with AsyncSessionLocal() as session:
        try:
            yield session
        finally:
            await session.close()

# ----- END: app/database.py -----

# ----- START: app/main.py -----

from fastapi.middleware.cors import CORSMiddleware
from app.config import settings
from app.api import earnings_router, currency_router
from fastapi import FastAPI, Query, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from datetime import datetime, timedelta, timezone
from typing import Optional, Dict
from decimal import Decimal

from app.database import get_db
from app.models.earnings import ProxyEarning
from app.models.currency import CurrencyRate

# –°–æ–∑–¥–∞–µ–º FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = FastAPI(
    title=settings.app_name,
    version=settings.version,
    description="API –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –±–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏",
    debug=settings.debug
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç—ã
app.include_router(earnings_router)
app.include_router(currency_router)


@app.get("/")
async def root():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
    return {
        "message": "Proxy Stats API",
        "version": settings.version,
        "status": "running"
    }


@app.get("/health")
async def health_check():
    """Health check endpoint"""
    return {"status": "healthy", "timestamp": datetime.now(timezone.utc)}


@app.get("/currencies", response_model=Dict[str, float])
async def get_currency_rates(
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π endpoint –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –∏–∑ –ë–î —á–µ—Ä–µ–∑ SQLAlchemy
        result = await db.execute(select(CurrencyRate))
        rates_records = result.scalars().all()
        
        if not rates_records:
            return {}
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∫—É—Ä—Å–æ–≤
        rates = {}
        for record in rates_records:
            rates[record.symbol] = float(record.price)
        
        return rates
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {str(e)}")


@app.get("/bot/submit")
async def submit_bot_data(
    proxy_address: str = Query(..., description="–ü—Ä–æ–∫—Å–∏ –∞–¥—Ä–µ—Å —Å –ø–æ—Ä—Ç–æ–º (IP:PORT)"),
    bot_name: str = Query(..., description="–ò–º—è –±–æ—Ç–∞"),
    earnings: float = Query(..., description="–ó–∞—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å—É–º–º–∞"),
    session_id: Optional[str] = Query(None, description="ID —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞"),
    asn: Optional[int] = Query(None, description="ASN –ø—Ä–æ–∫—Å–∏"),
    asn_org: Optional[str] = Query(None, description="–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è ASN"),
    db: AsyncSession = Depends(get_db)
):
    """
    –ë–æ—Ç –ø–æ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–æ–∫—Å–∏
    """
    try:
        # –ü–∞—Ä—Å–∏–º IP –∏ –ø–æ—Ä—Ç –∏–∑ proxy_address
        if ":" not in proxy_address:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞–¥—Ä–µ—Å–∞ –ø—Ä–æ–∫—Å–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ IP:PORT")
        
        proxy_ip, proxy_port_str = proxy_address.split(":", 1)
        try:
            proxy_port = int(proxy_port_str)
            if not (1 <= proxy_port <= 65535):
                raise ValueError()
        except ValueError:
            raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –ø–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏")
        
        # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞–ø–∏—Å–∏
        unique_key = f"{bot_name}_{proxy_address}_{session_id or 'no_session'}_{datetime.now().isoformat()}"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ —á–µ—Ä–µ–∑ SQLAlchemy
        earning_record = ProxyEarning(
            proxy_ip=proxy_ip,
            proxy_port=proxy_port,
            proxy_key=proxy_address,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∫–∞–∫ –∫–ª—é—á
            server_id="default",  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
            bot_id=bot_name,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–º—è –±–æ—Ç–∞ –∫–∞–∫ ID
            bot_name=bot_name,
            faucet_name="manual_submit",  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
            faucet_url=None,
            reward_amount=Decimal(str(earnings)),
            reward_currency="BTC",  # –ú–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º
            unique_key=unique_key,
            success=True,
            error_message=None,
            event_timestamp=datetime.now(timezone.utc),
            extra_data=f"session_id={session_id}, asn={asn}, asn_org={asn_org}" if any([session_id, asn, asn_org]) else None
        )
        
        db.add(earning_record)
        await db.commit()
        await db.refresh(earning_record)
        
        return {
            "message": "–î–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            "earning_id": earning_record.id,
            "proxy_address": proxy_address,
            "bot_name": bot_name,
            "amount": earnings
        }
        
    except HTTPException:
        raise
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


@app.get("/stats/summary")
async def get_stats_summary(
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–æ–¥–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        total_result = await db.execute(select(func.count(ProxyEarning.id)))
        total_earnings = total_result.scalar()
        
        # –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
        total_amount_result = await db.execute(
            select(func.sum(ProxyEarning.reward_amount))
        )
        total_amount = total_amount_result.scalar() or Decimal('0')
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –±–æ—Ç–æ–≤
        unique_bots_result = await db.execute(
            select(func.count(func.distinct(ProxyEarning.bot_name)))
        )
        unique_bots = unique_bots_result.scalar()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–∫—Å–∏
        unique_proxies_result = await db.execute(
            select(func.count(func.distinct(ProxyEarning.proxy_key)))
        )
        unique_proxies = unique_proxies_result.scalar()
        
        return {
            "total_earnings": total_earnings,
            "total_amount": float(total_amount),
            "unique_bots": unique_bots,
            "unique_proxies": unique_proxies,
            "last_updated": datetime.now(timezone.utc)
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


@app.get("/stats/daily")
async def get_daily_stats(
    days: int = Query(7, ge=1, le=30, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π"),
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    try:
        end_date = datetime.now(timezone.utc)
        start_date = end_date - timedelta(days=days)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –¥–Ω—è–º
        daily_stats_result = await db.execute(
            select(
                func.date(ProxyEarning.event_timestamp).label('date'),
                func.count(ProxyEarning.id).label('count'),
                func.sum(ProxyEarning.reward_amount).label('total_amount')
            )
            .where(ProxyEarning.event_timestamp >= start_date)
            .group_by(func.date(ProxyEarning.event_timestamp))
            .order_by(func.date(ProxyEarning.event_timestamp))
        )
        
        daily_stats = []
        for row in daily_stats_result:
            daily_stats.append({
                "date": row.date.isoformat(),
                "count": row.count,
                "total_amount": float(row.total_amount) if row.total_amount else 0.0
            })
        
        return {
            "period_days": days,
            "start_date": start_date.isoformat(),
            "end_date": end_date.isoformat(),
            "daily_stats": daily_stats
        }
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

# ----- END: app/main.py -----

# ----- START: app/__init__.py -----


# ----- END: app/__init__.py -----

# ----- START: app/api/currency.py -----

from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from typing import List, Dict
from datetime import datetime, timezone
import requests
import logging

from app.database import get_db
from app.models.currency import CurrencyRate
from app.schemas.currency import CurrencyRateCreate, CurrencyRateResponse, CurrencyRatesResponse, FetchResponse
from app.config import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = APIRouter(prefix="/currency", tags=["currency"])

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è API
CRYPTOCOMPARE_URL = "https://min-api.cryptocompare.com/data/pricemulti"
FROM_SYMBOL = "BTC"
TO_SYMBOLS = "BCH,DOGE,LTC,USDT,FEY,DGB,DASH,TRX,ZEC,ETH,BNB,SOL,XRP,MATIC,ADA,TON,XLM,XMR,USDC,TARA,TRUMP,PEPE"

@router.get("/rates", response_model=CurrencyRatesResponse)
async def get_currency_rates(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É—Ä—Å—ã –∏–∑ –ë–î
        result = await db.execute(select(CurrencyRate))
        rates_records = result.scalars().all()
        
        if not rates_records:
            return CurrencyRatesResponse(rates={}, last_updated=None)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –∫—É—Ä—Å–æ–≤
        rates = {}
        oldest_update = None
        
        for record in rates_records:
            rates[record.symbol] = float(record.price)
            if oldest_update is None or record.last_updated < oldest_update:
                oldest_update = record.last_updated
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –∫ UTC
        if oldest_update:
            oldest_update = oldest_update.astimezone(timezone.utc)
        
        logger.info(f"–ò–∑ –ë–î –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(rates)} –∫—É—Ä—Å–æ–≤. –°–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {oldest_update}")
        
        return CurrencyRatesResponse(rates=rates, last_updated=oldest_update)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤ –∏–∑ –ë–î: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {str(e)}")

@router.post("/fetch", response_model=FetchResponse)
async def fetch_and_store_rates(db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ —Å API –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –ë–î"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã —Å API
        params = {
            'fsyms': FROM_SYMBOL,
            'tsyms': TO_SYMBOLS,
            'api_key': settings.CRYPTOCOMPARE_API_KEY
        }
        
        response = requests.get(CRYPTOCOMPARE_URL, params=params, timeout=10)
        response.raise_for_status()
        
        data = response.json()
        if FROM_SYMBOL not in data:
            raise HTTPException(status_code=500, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API")
        
        rates = data[FROM_SYMBOL]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É—Ä—Å—ã –≤ –ë–î
        for symbol, price in rates.items():
            if price and price > 0:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏
                existing = await db.execute(
                    select(CurrencyRate).where(CurrencyRate.symbol == symbol)
                )
                existing_rate = existing.scalar_one_or_none()
                
                if existing_rate:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫—É—Ä—Å
                    existing_rate.price = price
                    existing_rate.last_updated = func.now()
                else:
                    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫—É—Ä—Å
                    new_rate = CurrencyRate(symbol=symbol, price=price)
                    db.add(new_rate)
        
        await db.commit()
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ/–≤—Å—Ç–∞–≤–ª–µ–Ω–æ {len(rates)} –∫—É—Ä—Å–æ–≤ –≤ –ë–î")
        
        return {"message": f"–û–±–Ω–æ–≤–ª–µ–Ω–æ {len(rates)} –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç", "count": len(rates)}
        
    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ API: {str(e)}")
    except Exception as e:
        await db.rollback()
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫—É—Ä—Å–æ–≤: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")

@router.get("/", response_model=List[CurrencyRateResponse])
async def get_all_currency_rates(
    skip: int = 0,
    limit: int = 100,
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    result = await db.execute(
        select(CurrencyRate).offset(skip).limit(limit)
    )
    rates = result.scalars().all()
    return rates

@router.get("/{symbol}", response_model=CurrencyRateResponse)
async def get_currency_rate(symbol: str, db: AsyncSession = Depends(get_db)):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã –ø–æ —Å–∏–º–≤–æ–ª—É"""
    result = await db.execute(
        select(CurrencyRate).where(CurrencyRate.symbol == symbol.upper())
    )
    rate = result.scalar_one_or_none()
    
    if not rate:
        raise HTTPException(status_code=404, detail="–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    return rate

# ----- END: app/api/currency.py -----

# ----- START: app/api/earnings.py -----

from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, func
from typing import List
import logging

from app.database import get_db
from app.models.earnings import ProxyEarning
from app.schemas.earnings import EarningCreate, EarningResponse

# --- –°–û–ó–î–ê–ï–ú –õ–û–ì–ì–ï–† ---
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞
router = APIRouter(prefix="/earnings", tags=["earnings"])


@router.post("/", response_model=EarningResponse)
async def create_earning(
    earning: EarningCreate,
    db: AsyncSession = Depends(get_db)
):
    """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
    try:
        # ‚úÖ –û—Ç–ª–∞–¥–∫–∞ - –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø–æ–ª—É—á–∞–µ–º –æ—Ç Pydantic
        print("=== DEBUG: Received earning object ===")
        print(f"proxy_key: {earning.proxy_key}")
        print(f"unique_key: {earning.unique_key}")
        print(f"All fields: {earning.model_dump()}")
        
        # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º model_dump() –≤–º–µ—Å—Ç–æ dict()
        earning_dict = earning.model_dump()
        
        # ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
        if not earning_dict.get('proxy_key'):
            raise HTTPException(status_code=400, detail="proxy_key is required")
        if not earning_dict.get('unique_key'):
            raise HTTPException(status_code=400, detail="unique_key is required")
        
        db_earning = ProxyEarning(**earning_dict)
        db.add(db_earning)
        await db.commit()
        await db.refresh(db_earning)
        
        return db_earning
    except Exception as e:
        await db.rollback()
        raise HTTPException(status_code=400, detail=f"Error creating earning: {str(e)}")



@router.get("/", response_model=List[EarningResponse])
async def get_earnings(
    skip: int = 0,
    limit: int = 100,
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–µ–π –∑–∞—Ä–∞–±–æ—Ç–∫–∞"""
    result = await db.execute(
        select(ProxyEarning).offset(skip).limit(limit)
    )
    earnings = result.scalars().all()
    return earnings


@router.get("/{earning_id}", response_model=EarningResponse)
async def get_earning(
    earning_id: int,
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ ID"""
    result = await db.execute(
        select(ProxyEarning).where(ProxyEarning.id == earning_id)
    )
    earning = result.scalar_one_or_none()
    
    if not earning:
        raise HTTPException(status_code=404, detail="Earning not found")
    
    return earning


@router.get("/proxy/{proxy_key}", response_model=List[EarningResponse])
async def get_earnings_by_proxy(
    proxy_key: str,
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –∫–ª—é—á—É –ø—Ä–æ–∫—Å–∏"""
    result = await db.execute(
        select(ProxyEarning).where(ProxyEarning.proxy_key == proxy_key)
    )
    earnings = result.scalars().all()
    return earnings


@router.get("/bot/{bot_name}", response_model=List[EarningResponse])
async def get_earnings_by_bot(
    bot_name: str,
    db: AsyncSession = Depends(get_db)
):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –∑–∞—Ä–∞–±–æ—Ç–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –±–æ—Ç–∞"""
    result = await db.execute(
        select(ProxyEarning).where(ProxyEarning.bot_name == bot_name)
    )
    earnings = result.scalars().all()
    return earnings

# ----- END: app/api/earnings.py -----

# ----- START: app/api/__init__.py -----

from .earnings import router as earnings_router
from .currency import router as currency_router

__all__ = ["earnings_router", "currency_router"]

# ----- END: app/api/__init__.py -----

# ----- START: app/models/currency.py -----

from sqlalchemy import Column, Integer, String, Numeric, DateTime, Text
from sqlalchemy.sql import func
from app.database import Base

class CurrencyRate(Base):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    __tablename__ = "currency_rates"
    
    id = Column(Integer, primary_key=True, index=True)
    symbol = Column(String(10), nullable=False, unique=True, index=True)
    price = Column(Numeric(20, 8), nullable=False)
    last_updated = Column(DateTime(timezone=True), default=func.now(), nullable=False)
    
    def __repr__(self):
        return f"<CurrencyRate(symbol={self.symbol}, price={self.price}, updated={self.last_updated})>"

# ----- END: app/models/currency.py -----

# ----- START: app/models/earnings.py -----

from sqlalchemy import Column, Integer, String, Numeric, DateTime, Text, Boolean
from sqlalchemy.sql import func
from app.database import Base

class ProxyEarning(Base):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–ø–∏—Å–∏ –∑–∞—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏"""
    __tablename__ = "proxy_earnings"
    
    id = Column(Integer, primary_key=True, index=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∫—Å–∏
    proxy_ip = Column(String(45), nullable=False, index=True)
    proxy_port = Column(Integer, nullable=False)
    proxy_key = Column(String(100), nullable=False, index=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–µ—Ä–µ –∏ –±–æ—Ç–µ
    server_id = Column(String(50), nullable=False, index=True)
    bot_id = Column(String(50), nullable=False)
    bot_name = Column(String(100), nullable=False, index=True)
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ
    faucet_name = Column(String(100), nullable=False)
    faucet_url = Column(String(255), nullable=True)
    
    # –°—É–º–º–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞
    reward_amount = Column(Numeric(20, 8), nullable=False)
    reward_currency = Column(String(10), nullable=False)
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    unique_key = Column(String(64), nullable=False, unique=True, index=True)
    success = Column(Boolean, default=True, nullable=False)
    error_message = Column(Text, nullable=True)
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
    event_timestamp = Column(DateTime(timezone=True), nullable=False)
    created_at = Column(DateTime(timezone=True), default=func.now(), nullable=False)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ò–°–ü–†–ê–í–õ–ï–ù–û)
    extra_data = Column(Text, nullable=True)
    
    def __repr__(self):
        return f"<ProxyEarning(bot={self.bot_name}, proxy={self.proxy_key}, amount={self.reward_amount} {self.reward_currency})>"

# ----- END: app/models/earnings.py -----

# ----- START: app/models/__init__.py -----

from .earnings import ProxyEarning
from .currency import CurrencyRate

__all__ = ["ProxyEarning", "CurrencyRate"]

# ----- END: app/models/__init__.py -----

# ----- START: app/schemas/currency.py -----

from pydantic import BaseModel, Field
from datetime import datetime
from decimal import Decimal
from typing import Dict

class CurrencyRateCreate(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç—ã"""
    symbol: str = Field(..., max_length=10, description="–°–∏–º–≤–æ–ª –≤–∞–ª—é—Ç—ã")
    price: Decimal = Field(..., gt=0, description="–ö—É—Ä—Å –≤–∞–ª—é—Ç—ã")

class CurrencyRateResponse(BaseModel):
    """–°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ —Å –∫—É—Ä—Å–æ–º –≤–∞–ª—é—Ç—ã"""
    id: int
    symbol: str
    price: Decimal
    last_updated: datetime
    
    class Config:
        from_attributes = True

class CurrencyRatesResponse(BaseModel):
    """–°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ —Å –∫—É—Ä—Å–∞–º–∏ –≤–∞–ª—é—Ç"""
    rates: Dict[str, float]
    last_updated: datetime | None


class FetchResponse(BaseModel):
    """–°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞ –ø–æ –∑–∞–≥—Ä—É–∑–∫–µ –∫—É—Ä—Å–æ–≤."""
    message: str
    count: int
# ----- END: app/schemas/currency.py -----

# ----- START: app/schemas/earnings.py -----

from pydantic import BaseModel, Field, validator
from datetime import datetime
from decimal import Decimal
from typing import Optional

class EarningCreate(BaseModel):
    """–°—Ö–µ–º–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏ –æ –∑–∞—Ä–∞–±–æ—Ç–∫–µ"""
    proxy_ip: str = Field(..., description="IP –∞–¥—Ä–µ—Å –ø—Ä–æ–∫—Å–∏")
    proxy_port: int = Field(..., ge=1, le=65535, description="–ü–æ—Ä—Ç –ø—Ä–æ–∫—Å–∏")
    proxy_key: str = Field(..., max_length=100, description="–ö–ª—é—á –ø—Ä–æ–∫—Å–∏")  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
    server_id: str = Field(..., max_length=50, description="ID —Å–µ—Ä–≤–µ—Ä–∞")
    bot_id: str = Field(..., max_length=50, description="ID –±–æ—Ç–∞")
    bot_name: str = Field(..., max_length=100, description="–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞")
    faucet_name: str = Field(..., max_length=100, description="–ù–∞–∑–≤–∞–Ω–∏–µ –∫—Ä–∞–Ω–∞")
    faucet_url: Optional[str] = Field(None, max_length=255, description="URL –∫—Ä–∞–Ω–∞")
    reward_amount: Decimal = Field(..., gt=0, description="–°—É–º–º–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞")
    reward_currency: str = Field(..., max_length=10, description="–í–∞–ª—é—Ç–∞ –∑–∞—Ä–∞–±–æ—Ç–∫–∞")
    unique_key: str = Field(..., max_length=64, description="–£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –∑–∞–ø–∏—Å–∏")  # ‚úÖ –î–û–ë–ê–í–õ–ï–ù–û
    success: bool = Field(True, description="–£—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏")
    error_message: Optional[str] = Field(None, description="–°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ")
    event_timestamp: datetime = Field(..., description="–í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è")  # ‚úÖ –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    extra_data: Optional[str] = Field(None, description="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (JSON)")

    @validator('bot_name')  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–±—ã—á–Ω—ã–π underscore
    def validate_bot_name(cls, v):
        if not v.strip():
            raise ValueError('–ù–∞–∑–≤–∞–Ω–∏–µ –±–æ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º')
        return v.strip()

class EarningResponse(BaseModel):
    """–°—Ö–µ–º–∞ –æ—Ç–≤–µ—Ç–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø–∏—Å–∏"""
    id: int
    proxy_ip: str
    proxy_port: int
    proxy_key: str
    server_id: str
    bot_id: str
    bot_name: str
    faucet_name: str
    faucet_url: Optional[str]
    reward_amount: Decimal
    reward_currency: str
    unique_key: str
    success: bool
    error_message: Optional[str]
    event_timestamp: datetime
    created_at: datetime
    extra_data: Optional[str]
    
    class Config:
        from_attributes = True  # ‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –æ–±—ã—á–Ω—ã–π underscore

# ----- END: app/schemas/earnings.py -----

# ----- START: app/schemas/__init__.py -----


# ----- END: app/schemas/__init__.py -----

# ----- START: postgres_data/scripts/backup_database.ps1 -----

Ôªø# –£–ª—É—á—à–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞ PostgreSQL
Write-Host "–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..." -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω
$containerRunning = docker ps --filter "name=proxy_stats_db" --format "{{.Names}}" 2>$null
if (-not $containerRunning) {
    Write-Host "–û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä proxy_stats_db –Ω–µ –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Red
    Write-Host "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –±—ç–∫–∞–ø–∞" -ForegroundColor Yellow
    exit 1
}

$timestamp = Get-Date -Format "yyyy-MM-dd_HH-mm-ss"
$backupFile = "postgres_data\backups\backup_$timestamp.sql"
Write-Host "–§–∞–π–ª –±—ç–∫–∞–ø–∞: $backupFile" -ForegroundColor Cyan

# –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –ø–∞–ø–∫–∞ –±—ç–∫–∞–ø–æ–≤ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (-not (Test-Path "postgres_data\backups")) {
    New-Item -ItemType Directory -Path "postgres_data\backups" -Force | Out-Null
    Write-Host "–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ –±—ç–∫–∞–ø–æ–≤" -ForegroundColor Yellow
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –±—ç–∫–∞–ø–æ–º
Write-Host "–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Cyan
$recordCount = docker exec proxy_stats_db psql -U admin -d proxy_stats -t -c "SELECT COUNT(*) FROM proxy_earnings;" 2>$null

if ($LASTEXITCODE -eq 0 -and $recordCount) {
    $recordCount = $recordCount.Trim()
    Write-Host "–ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ –¥–ª—è –±—ç–∫–∞–ø–∞: $recordCount" -ForegroundColor Green
} else {
    Write-Host "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π" -ForegroundColor Yellow
    Write-Host "–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞..." -ForegroundColor Yellow
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞
Write-Host "–í—ã–ø–æ–ª–Ω—è–µ–º pg_dump..." -ForegroundColor Yellow
docker exec -t proxy_stats_db pg_dump -U admin --data-only --no-owner --no-privileges proxy_stats > $backupFile

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if ($LASTEXITCODE -eq 0) {
    $fileSize = (Get-Item $backupFile).Length

    # –ù–û–í–ê–Ø –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏—â–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—É COPY, —Ç–∞–∫ –∫–∞–∫ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º --data-only
    $hasContent = Get-Content $backupFile | Select-String -Pattern "COPY " -Quiet

    if ($hasContent) {
        # –ë—ç–∫–∞–ø —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ (–∫–æ–º–∞–Ω–¥–∞ COPY –Ω–∞–π–¥–µ–Ω–∞)
        Write-Host "–ë—ç–∫–∞–ø —Å –¥–∞–Ω–Ω—ã–º–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!" -ForegroundColor Green
        Write-Host "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: $fileSize –±–∞–π—Ç" -ForegroundColor Green
        Write-Host "–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ: $(Resolve-Path $backupFile)" -ForegroundColor Green
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—ç–∫–∞–ø–æ–≤
        $backupCount = (Get-ChildItem "postgres_data\backups" -Filter "*.sql").Count
        Write-Host "–í—Å–µ–≥–æ –±—ç–∫–∞–ø–æ–≤ –≤ –ø–∞–ø–∫–µ: $backupCount" -ForegroundColor Green
        
    } else {
        # –ë—ç–∫–∞–ø –ù–ï —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã—Ö (–∫–æ–º–∞–Ω–¥–∞ COPY –Ω–µ –Ω–∞–π–¥–µ–Ω–∞)
        Write-Host "–ò–ù–§–û–†–ú–ê–¶–ò–Ø: –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –±—ã–ª–∞ –ø—É—Å—Ç–∞. –ë—ç–∫–∞–ø —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É." -ForegroundColor Yellow
        Write-Host "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: $fileSize –±–∞–π—Ç" -ForegroundColor Yellow
        
        # –ù–ï —É–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –Ω–æ —Å–æ–æ–±—â–∞–µ–º, —á—Ç–æ –æ–Ω –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö
        Write-Host "–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω, –Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ–≥–æ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è." -ForegroundColor Cyan
    }
    
}

# ----- END: postgres_data/scripts/backup_database.ps1 -----

# ----- START: postgres_data/scripts/check_and_restore.ps1 -----

Ôªø# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
Write-Host "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Cyan
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
$containerRunning = docker ps --filter "name=proxy_stats_db" --format "{{.Names}}" 2>$null
if (-not $containerRunning) {
    Write-Host "–û—à–∏–±–∫–∞: –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä proxy_stats_db –Ω–µ –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Red
    Write-Host "–ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä: docker start proxy_stats_db" -ForegroundColor Yellow
    exit 1
}
# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –¥–∞–Ω–Ω—ã—Ö
Write-Host "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã proxy_earnings..."
$tableExists = docker exec proxy_stats_db psql -U admin -d proxy_stats -t -c "SELECT EXISTS (SELECT FROM information_schema.tables WHERE table_name = 'proxy_earnings');" 2>$null
if ($LASTEXITCODE -ne 0) {
    Write-Host "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö" -ForegroundColor Red
    exit 1
}
# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã
if ($tableExists.Trim() -eq "t") {
    # –¢–∞–±–ª–∏—Ü–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - —Å—á–∏—Ç–∞–µ–º –∑–∞–ø–∏—Å–∏
    Write-Host "–ü–æ–¥—Å—á–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ proxy_earnings..."
    $recordCount = docker exec proxy_stats_db psql -U admin -d proxy_stats -t -c "SELECT COUNT(*) FROM proxy_earnings;" 2>$null
    $recordCount = $recordCount.Trim()
    Write-Host "–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: $recordCount" -ForegroundColor Green
} else {
    # –¢–∞–±–ª–∏—Ü—ã –Ω–µ—Ç - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤ 0 –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    Write-Host "–¢–∞–±–ª–∏—Ü–∞ proxy_earnings –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç" -ForegroundColor Yellow
    $recordCount = "0"
}
# –õ–æ–≥–∏–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è (–ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô)
if ($recordCount -eq "0" -or $recordCount -eq "" -or $null -eq $recordCount) {
    Write-Host "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ù–∞—á–∏–Ω–∞–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ..." -ForegroundColor Yellow
    
    # –ü–æ–∏—Å–∫ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –±—ç–∫–∞–ø–∞
    if (Test-Path "postgres_data\backups") {
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–µ –±—ç–∫–∞–ø—ã (—Å –¥–∞–Ω–Ω—ã–º–∏)
        $workingBackups = Get-ChildItem "postgres_data\backups" -Filter "*.sql" | 
                         Where-Object { $_.Length -gt 5000 }
        
        if ($workingBackups) {
            $latestBackup = $workingBackups | Sort-Object CreationTime -Descending | Select-Object -First 1
        } else {
            Write-Host "–û–®–ò–ë–ö–ê: –ù–µ—Ç —Ä–∞–±–æ—á–∏—Ö –±—ç–∫–∞–ø–æ–≤ (>5000 –±–∞–π—Ç) –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è" -ForegroundColor Red
            Write-Host "–í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–¥–µ—Ä–∂–∞—Ç —Ç–æ–ª—å–∫–æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ë–î –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö" -ForegroundColor Yellow
            exit 1
        }
        
        if ($latestBackup) {
            Write-Host "–ù–∞–π–¥–µ–Ω –±—ç–∫–∞–ø: $($latestBackup.Name)" -ForegroundColor Cyan
            Write-Host "–†–∞–∑–º–µ—Ä: $($latestBackup.Length) –±–∞–π—Ç" 
            Write-Host "–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ..." -ForegroundColor Yellow
            
            # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - –ò–°–ü–†–ê–í–õ–ï–ù–û: –∏—Å–ø–æ–ª—å–∑—É–µ–º Get-Content —Å pipe
            Get-Content $latestBackup.FullName | docker exec -i proxy_stats_db psql -U admin proxy_stats
            
            if ($LASTEXITCODE -eq 0) {
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                $newCount = docker exec proxy_stats_db psql -U admin -d proxy_stats -t -c "SELECT COUNT(*) FROM proxy_earnings;" 2>$null
                Write-Host "–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!" -ForegroundColor Green
                if ($newCount -and $newCount.Trim()) {
    Write-Host "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: $($newCount.Trim())" -ForegroundColor Green
} else {
    Write-Host "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å" -ForegroundColor Yellow
}
                
                # –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
                Write-Host "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:" -ForegroundColor Cyan
                docker exec proxy_stats_db psql -U admin -d proxy_stats -c "SELECT id, bot_name, proxy_key FROM proxy_earnings ORDER BY id DESC LIMIT 5;"
            } else {
                Write-Host "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö" -ForegroundColor Red
                exit 1
            }
        } else {
            Write-Host "–ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ postgres_data\backups" -ForegroundColor Red
            exit 1
        }
    } else {
        Write-Host "–ü–∞–ø–∫–∞ –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: postgres_data\backups" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ ($recordCount –∑–∞–ø–∏—Å–µ–π). –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è." -ForegroundColor Green
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏
    Write-Host "–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ:" -ForegroundColor Cyan
    docker exec proxy_stats_db psql -U admin -d proxy_stats -c "SELECT id, bot_name, proxy_key, created_at FROM proxy_earnings ORDER BY id DESC LIMIT 3;"
}
Write-Host "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞." -ForegroundColor Green

# ----- END: postgres_data/scripts/check_and_restore.ps1 -----

# ----- START: postgres_data/scripts/force_restore.ps1 -----

Ôªø# –°–∫—Ä–∏–ø—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è PostgreSQL
param([string]$BackupFile)

Write-Host "üîß –°–ö–†–ò–ü–¢ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ì–û –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–Ø" -ForegroundColor Yellow
Write-Host "============================================" -ForegroundColor Yellow

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É
Write-Host "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL..."
$containerRunning = docker ps --filter "name=proxy_stats_db" --format "{{.Names}}" 2>$null
if (-not $containerRunning) {
    Write-Host "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä proxy_stats_db –Ω–µ –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Red
    Write-Host "üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: docker start proxy_stats_db" -ForegroundColor Yellow
    exit 1
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã
Write-Host "üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:"
$currentCount = docker exec proxy_stats_db psql -U admin -d proxy_stats -t -c "SELECT COUNT(*) FROM proxy_earnings;" 2>$null
if ($currentCount) {
    Write-Host "   –ó–∞–ø–∏—Å–µ–π –≤ –±–∞–∑–µ: $($currentCount.Trim())" -ForegroundColor Cyan
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏
    Write-Host "   –¢–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏:" -ForegroundColor Cyan
    docker exec proxy_stats_db psql -U admin -d proxy_stats -c "SELECT id, bot_name, proxy_key FROM proxy_earnings ORDER BY id LIMIT 5;"
} else {
    Write-Host "   –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞" -ForegroundColor Yellow
}

Write-Host ""

# –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫
if (-not $BackupFile) {
    Write-Host "üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:" -ForegroundColor Green
    if (Test-Path "postgres_data\backups") {
        $backups = Get-ChildItem "postgres_data\backups" -Filter "*.sql" | Sort-Object CreationTime -Descending
        if ($backups) {
            $backups | ForEach-Object {
                $size = [math]::Round($_.Length / 1KB, 2)
                Write-Host "   üìÑ $($_.Name)" -ForegroundColor White
                Write-Host "      –°–æ–∑–¥–∞–Ω: $($_.CreationTime)" -ForegroundColor Gray
                Write-Host "      –†–∞–∑–º–µ—Ä: $size KB" -ForegroundColor Gray
                Write-Host ""
            }
            Write-Host "üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: .\force_restore.ps1 -BackupFile '–∏–º—è_—Ñ–∞–π–ª–∞.sql'" -ForegroundColor Yellow
            Write-Host "üí° –ü—Ä–∏–º–µ—Ä: .\force_restore.ps1 -BackupFile '$($backups[0].Name)'" -ForegroundColor Yellow
        } else {
            Write-Host "   –ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" -ForegroundColor Red
        }
    } else {
        Write-Host "   –ü–∞–ø–∫–∞ –±—ç–∫–∞–ø–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" -ForegroundColor Red
    }
    exit 0
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –±—ç–∫–∞–ø–∞
$fullBackupPath = "postgres_data\backups\$BackupFile"
if (-not (Test-Path $fullBackupPath)) {
    Write-Host "‚ùå –§–∞–π–ª –±—ç–∫–∞–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: $fullBackupPath" -ForegroundColor Red
    Write-Host ""
    Write-Host "üìÇ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:"
    Get-ChildItem "postgres_data\backups" -Filter "*.sql" | ForEach-Object {
        Write-Host "   $($_.Name)" -ForegroundColor White
    }
    exit 1
}

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –±—ç–∫–∞–ø–µ
$backupInfo = Get-Item $fullBackupPath
$backupSize = [math]::Round($backupInfo.Length / 1KB, 2)
Write-Host "üìÑ –í—ã–±—Ä–∞–Ω–Ω—ã–π –±—ç–∫–∞–ø:" -ForegroundColor Green
Write-Host "   –§–∞–π–ª: $($backupInfo.Name)" -ForegroundColor White
Write-Host "   –°–æ–∑–¥–∞–Ω: $($backupInfo.CreationTime)" -ForegroundColor Gray
Write-Host "   –†–∞–∑–º–µ—Ä: $backupSize KB" -ForegroundColor Gray

# –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï
Write-Host ""
Write-Host "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï!" -ForegroundColor Red -BackgroundColor Yellow
Write-Host "üö® –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ:" -ForegroundColor Red
Write-Host "   ‚Ä¢ –£–¥–∞–ª–∏—Ç –í–°–ï —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ç–∞–±–ª–∏—Ü–µ proxy_earnings" -ForegroundColor Red
Write-Host "   ‚Ä¢ –°–±—Ä–æ—Å–∏—Ç —Å—á–µ—Ç—á–∏–∫ –∞–≤—Ç–æ–∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞" -ForegroundColor Red
Write-Host "   ‚Ä¢ –ó–∞–º–µ–Ω–∏—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞" -ForegroundColor Red
Write-Host ""
Write-Host "‚è∞ –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ë–ï–ó–í–û–ó–í–†–ê–¢–ù–û –ø–æ—Ç–µ—Ä—è–Ω—ã!" -ForegroundColor Red

# –î–≤–æ–π–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
Write-Host ""
Write-Host "üîê –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ 'FORCE' (–∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏):" -ForegroundColor Yellow
$confirmation1 = Read-Host
if ($confirmation1 -ne "FORCE") {
    Write-Host "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ." -ForegroundColor Red
    exit 0
}

Write-Host "üîê –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ—â–µ —Ä–∞–∑, –≤–≤–µ–¥–∏—Ç–µ 'YES':" -ForegroundColor Yellow
$confirmation2 = Read-Host
if ($confirmation2 -ne "YES") {
    Write-Host "‚ùå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º." -ForegroundColor Red
    exit 0
}

# –ü—Ä–æ—Ü–µ—Å—Å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
Write-Host ""
Write-Host "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ..." -ForegroundColor Green

# –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
Write-Host "üßπ –û—á–∏—â–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã..."
docker exec -it proxy_stats_db psql -U admin -d proxy_stats -c "TRUNCATE TABLE proxy_earnings RESTART IDENTITY CASCADE;"

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–∞–±–ª–∏—Ü—ã" -ForegroundColor Red
    exit 1
}
Write-Host "‚úÖ –¢–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞" -ForegroundColor Green

# –®–∞–≥ 2: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
Write-Host "üì• –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –±—ç–∫–∞–ø–∞..."
Get-Content $fullBackupPath | docker exec -i proxy_stats_db psql -U admin proxy_stats

if ($LASTEXITCODE -eq 0) {
    Write-Host "‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!" -ForegroundColor Green
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    Write-Host ""
    Write-Host "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è..."
    $newCount = docker exec proxy_stats_db psql -U admin -d proxy_stats -t -c "SELECT COUNT(*) FROM proxy_earnings;" 2>$null
    Write-Host "üìä –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: $($newCount.Trim())" -ForegroundColor Green
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    Write-Host ""
    Write-Host "üìã –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:" -ForegroundColor Cyan
    docker exec proxy_stats_db psql -U admin -d proxy_stats -c "SELECT id, bot_name, proxy_key, created_at FROM proxy_earnings ORDER BY id;"
    
    Write-Host ""
    Write-Host "üéâ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û –£–°–ü–ï–®–ù–û!" -ForegroundColor Green -BackgroundColor Black
} else {
    Write-Host "‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–∫–æ–¥: $LASTEXITCODE)" -ForegroundColor Red
    exit 1
}

# ----- END: postgres_data/scripts/force_restore.ps1 -----

# ----- START: postgres_data/scripts/get_project_paths.ps1 -----

# –°–æ–∑–¥–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–µ–π
@"
# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
function Get-ProjectPaths {
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ (–≥–¥–µ –µ—Å—Ç—å app/, alembic/, requirements.txt)
    `$currentPath = Get-Location
    `$projectRoot = `$currentPath
    
    # –ò—â–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤–≤–µ—Ä—Ö –ø–æ –¥–µ—Ä–µ–≤—É
    while (`$projectRoot.Parent -and -not (Test-Path (Join-Path `$projectRoot "requirements.txt"))) {
        `$projectRoot = `$projectRoot.Parent
    }
    
    if (-not (Test-Path (Join-Path `$projectRoot "requirements.txt"))) {
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—É—â—É—é –ø–∞–ø–∫—É
        `$projectRoot = `$currentPath
    }
    
    return @{
        ProjectRoot = `$projectRoot.Path
        BackupsDir = Join-Path `$projectRoot.Path "postgres_data\backups"
        ScriptsDir = Join-Path `$projectRoot.Path "postgres_data\scripts"
        ConfigDir = Join-Path `$projectRoot.Path "postgres_data\config"
    }
}

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é
Export-ModuleMember -Function Get-ProjectPaths
"@ | Out-File -FilePath "./postgres_data/scripts/get_project_paths.ps1" -Encoding UTF8

echo "‚úÖ –°–∫—Ä–∏–ø—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø—É—Ç–µ–π —Å–æ–∑–¥–∞–Ω"

# ----- END: postgres_data/scripts/get_project_paths.ps1 -----

# ----- START: postgres_data/scripts/startup_system.ps1 -----

# –°–æ–∑–¥–∞–π—Ç–µ master —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã
@'
# –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞
param([switch]$Silent)

$ErrorActionPreference = "Continue"

if (-not $Silent) {
    Write-Host "üöÄ –ê–í–¢–û–ó–ê–ü–£–°–ö –ú–ò–ö–†–û–°–ï–†–í–ò–°–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ò –ë–û–¢–û–í" -ForegroundColor Green
    Write-Host "===========================================" -ForegroundColor Green
}

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞
$projectRoot = $PSScriptRoot
while ($projectRoot.Parent -and -not (Test-Path (Join-Path $projectRoot "requirements.txt"))) {
    $projectRoot = $projectRoot.Parent
}
if (-not (Test-Path (Join-Path $projectRoot "requirements.txt"))) {
    $projectRoot = Split-Path $PSScriptRoot -Parent | Split-Path -Parent
}

Set-Location $projectRoot.Path
if (-not $Silent) { Write-Host "üìÅ –ö–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞: $($projectRoot.Path)" -ForegroundColor Cyan }

# –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ Docker
if (-not $Silent) { Write-Host "üê≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker..." -ForegroundColor Yellow }
$dockerRunning = Get-Process "Docker Desktop" -ErrorAction SilentlyContinue
if (-not $dockerRunning) {
    if (-not $Silent) { Write-Host "‚ö†Ô∏è  Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫–∞..." -ForegroundColor Yellow }
    Start-Process "C:\Program Files\Docker\Docker\Docker Desktop.exe" -WindowStyle Hidden
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Docker (–¥–æ 60 —Å–µ–∫—É–Ω–¥)
    $timeout = 60
    do {
        Start-Sleep -Seconds 5
        $timeout -= 5
        $dockerCheck = docker ps 2>$null
    } while ((-not $dockerCheck) -and ($timeout -gt 0))
    
    if ($timeout -le 0) {
        Write-Host "‚ùå Docker –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ 60 —Å–µ–∫—É–Ω–¥" -ForegroundColor Red
        exit 1
    }
}

# –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
if (-not $Silent) { Write-Host "üóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä—è–µ–º PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..." -ForegroundColor Yellow }
$containerStatus = docker ps --filter "name=proxy_stats_db" --format "{{.Status}}" 2>$null

if (-not $containerStatus) {
    if (-not $Silent) { Write-Host "üîÑ –ó–∞–ø—É—Å–∫–∞–µ–º PostgreSQL –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä..." -ForegroundColor Yellow }
    docker start proxy_stats_db
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ PostgreSQL" -ForegroundColor Red
        exit 1
    }
}

# –®–∞–≥ 3: –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL (–¥–æ 30 —Å–µ–∫—É–Ω–¥)
if (-not $Silent) { Write-Host "‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..." -ForegroundColor Yellow }
$dbTimeout = 30
do {
    Start-Sleep -Seconds 2
    $dbTimeout -= 2
    $dbReady = docker exec proxy_stats_db pg_isready -U admin 2>$null
} while (($LASTEXITCODE -ne 0) -and ($dbTimeout -gt 0))

if ($dbTimeout -le 0) {
    Write-Host "‚ùå PostgreSQL –Ω–µ –≥–æ—Ç–æ–≤ –≤ —Ç–µ—á–µ–Ω–∏–µ 30 —Å–µ–∫—É–Ω–¥" -ForegroundColor Red
    exit 1
}

if (-not $Silent) { Write-Host "‚úÖ PostgreSQL –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ" -ForegroundColor Green }

# –®–∞–≥ 4: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if (-not $Silent) { Write-Host "üîç –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Yellow }

$checkScript = Join-Path $projectRoot.Path "postgres_data\scripts\check_and_restore.ps1"
if (Test-Path $checkScript) {
    & $checkScript
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" -ForegroundColor Red
        exit 1
    }
} else {
    Write-Host "‚ö†Ô∏è  –°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: $checkScript" -ForegroundColor Yellow
}

# –®–∞–≥ 5: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π Alembic
if (-not $Silent) { Write-Host "üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..." -ForegroundColor Yellow }
if (Test-Path ".venv\Scripts\activate.ps1") {
    & .venv\Scripts\activate.ps1
    alembic upgrade head
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –æ—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π" -ForegroundColor Yellow
    }
}

# –®–∞–≥ 6: –ó–∞–ø—É—Å–∫ FastAPI —Å–µ—Ä–≤–µ—Ä–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –≤ —Ñ–æ–Ω–µ)
if (-not $Silent) { 
    Write-Host "üåê –ì–æ—Ç–æ–≤ –∫ –∑–∞–ø—É—Å–∫—É FastAPI —Å–µ—Ä–≤–µ—Ä–∞..." -ForegroundColor Green
    Write-Host "üí° –î–ª—è –∑–∞–ø—É—Å–∫–∞ API –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: uvicorn app.main:app --host 0.0.0.0 --port 8008" -ForegroundColor Cyan
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
$statusFile = Join-Path $projectRoot.Path "postgres_data\.system_ready"
Get-Date | Out-File -FilePath $statusFile -Encoding UTF8

if (-not $Silent) {
    Write-Host ""
    Write-Host "üéâ –°–ò–°–¢–ï–ú–ê –ú–ò–ö–†–û–°–ï–†–í–ò–°–ê –ì–û–¢–û–í–ê –ö –†–ê–ë–û–¢–ï!" -ForegroundColor Green -BackgroundColor Black
    Write-Host "üìä –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: –ì–û–¢–û–í–ê" -ForegroundColor Green
    Write-Host "üîó API –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞: http://localhost:8008" -ForegroundColor Cyan
    Write-Host "üìñ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8008/docs" -ForegroundColor Cyan
}

exit 0
'@ | Out-File -FilePath ".\postgres_data\scripts\startup_system.ps1" -Encoding UTF8

Write-Host "‚úÖ –ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞ —Å–æ–∑–¥–∞–Ω"

# ----- END: postgres_data/scripts/startup_system.ps1 -----
